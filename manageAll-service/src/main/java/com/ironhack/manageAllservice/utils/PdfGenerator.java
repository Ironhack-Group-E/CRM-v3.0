package com.ironhack.manageAllservice.utils;


import com.ironhack.manageAllservice.controller.dtos.report.*;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PdfGenerator {


    private static Font catFont = new Font(Font.FontFamily.HELVETICA, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.HELVETICA, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.HELVETICA, 14,
            Font.ITALIC);
    private static Font smallBold = new Font(Font.FontFamily.HELVETICA, 12,
            Font.BOLD);
    private static Font small = new Font(Font.FontFamily.HELVETICA, 12,
            Font.NORMAL);
    private static Font smallItalics = new Font(Font.FontFamily.HELVETICA, 12,
            Font.ITALIC);
    private static HashMap<String, List<OpportunitiesByCityDTO>> queries1 = new HashMap<>();
    private static HashMap<String, List<OpportunitiesByCountryDTO>> queries2 = new HashMap<>();
    private static HashMap<String, List<OpportunitiesByIndustryDTO>> queries3 = new HashMap<>();
    private static HashMap<String, List<OpportunityByProductDTO>> queries4 = new HashMap<>();
    private static HashMap<String, List<ReportDTO>> queries5 = new HashMap<>();
    private static HashMap<String, Double> stats;

    public static void init(
            HashMap<String, List<OpportunitiesByCityDTO>> queries1,
            HashMap<String, List<OpportunitiesByCountryDTO>> queries2,
            HashMap<String, List<OpportunitiesByIndustryDTO>> queries3,
            HashMap<String, List<OpportunityByProductDTO>> queries4,
            HashMap<String, List<ReportDTO>> queries5,
            HashMap<String, Double> stats
    ) {
        PdfGenerator.queries1 = queries1;
        PdfGenerator.queries2 = queries2;
        PdfGenerator.queries3 = queries3;
        PdfGenerator.queries4 = queries4;
        PdfGenerator.queries5 = queries5;
        PdfGenerator.stats = stats;

    }

    public static void generatePdf() throws DocumentException, FileNotFoundException {
        Document document = new Document(PageSize.A4, 50, 50, 50, 50);
        PdfWriter.getInstance(document, new FileOutputStream("src/main/resources/reports/report_" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("d-MM-yyy_HH-mm-ss")) + ".pdf"));
        document.open();
        addMetaData(document);
        addContentPage(document);
        document.close();


    }

    private static void addMetaData(Document document) {
        document.addTitle("CRM Report");
        document.addSubject("Report of your database");
        document.addAuthor("The Exceptionalists CRM 2.0");
        document.addCreator("The Exceptionalists CRM 2.0");
    }

    private static void addContentPage(Document document)
            throws DocumentException {
        Paragraph contents = new Paragraph();
        // We add one empty line
        addEmptyLine(contents, 1);
        // Lets write a big header
        contents.add(new Paragraph("Report", catFont));

        addEmptyLine(contents, 1);
        // Will create: Report generated by: _name, _date
        contents.add(new Paragraph(
                "Report generated on: " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        contents.add(new Paragraph(
                "This file contains all reports and stats extracted from CRM v3.0.",
                smallItalics));

        addEmptyLine(contents, 1);

        for (Map.Entry<String, List<OpportunitiesByCityDTO>> entries : queries1.entrySet()) {
            if (!entries.getValue().isEmpty()) {
                contents.add(generateQueryReport1(entries.getKey(), entries.getValue()));
                addEmptyLine(contents, 1);

            }
        }
        for (Map.Entry<String, List<OpportunitiesByCountryDTO>> entries : queries2.entrySet()) {
            if (!entries.getValue().isEmpty()) {
                contents.add(generateQueryReport2(entries.getKey(), entries.getValue()));
                addEmptyLine(contents, 1);

            }
        }
        for (Map.Entry<String, List<OpportunitiesByIndustryDTO>> entries : queries3.entrySet()) {
            if (!entries.getValue().isEmpty()) {
                contents.add(generateQueryReport3(entries.getKey(), entries.getValue()));
                addEmptyLine(contents, 1);

            }
        }
        for (Map.Entry<String, List<OpportunityByProductDTO>> entries : queries4.entrySet()) {
            if (!entries.getValue().isEmpty()) {
                contents.add(generateQueryReport4(entries.getKey(), entries.getValue()));
                addEmptyLine(contents, 1);

            }
        }
        for (Map.Entry<String, List<ReportDTO>> entries : queries5.entrySet()) {
            if (!entries.getValue().isEmpty()) {
                contents.add(generateQueryReport5(entries.getKey(), entries.getValue()));
                addEmptyLine(contents, 1);

            }
        }
        contents.add(new Paragraph(
                "Stats:",
                subFont));

        Paragraph statsParagraph = new Paragraph("");

        for (Map.Entry<String, Double> stats : stats.entrySet()) {

            Chunk chunk = new Chunk(stats.getKey() + ": ", smallBold);
            Chunk chunk1 = new Chunk(String.valueOf(stats.getValue()), small);
            statsParagraph.add(chunk);
            statsParagraph.add(chunk1);
            statsParagraph.add("\n");

        }
        contents.add(statsParagraph);
        addEmptyLine(contents, 1);
        document.add(contents);

        // Start a new page

    }

    private static Paragraph generateQueryReport1(String title, List<OpportunitiesByCityDTO> objects) throws DocumentException {


        if (!objects.isEmpty()) {

            Paragraph paragraph = new Paragraph(title, subFont);
            com.itextpdf.text.List list = new com.itextpdf.text.List(false, false, 10);
            for (OpportunitiesByCityDTO object : objects) {
                Chunk chunk = new Chunk(String.valueOf(object.getCity()) + ": ", smallBold);
                Chunk chunk1 = new Chunk(String.valueOf(object.getCount()), small);
                Paragraph paragraph1 = new Paragraph("");
                paragraph1.add(chunk);
                paragraph1.add(chunk1);
                list.add(new ListItem(paragraph1));

            }
            paragraph.add(list);
            return paragraph;

        }


        return new Paragraph("");
    }

    private static Paragraph generateQueryReport2(String title, List<OpportunitiesByCountryDTO> objects) throws DocumentException {


        if (!objects.isEmpty()) {

            Paragraph paragraph = new Paragraph(title, subFont);
            com.itextpdf.text.List list = new com.itextpdf.text.List(false, false, 10);
            for (OpportunitiesByCountryDTO object : objects) {
                Chunk chunk = new Chunk(String.valueOf(object.getCountry()) + ": ", smallBold);
                Chunk chunk1 = new Chunk(String.valueOf(object.getCount()), small);
                Paragraph paragraph1 = new Paragraph("");
                paragraph1.add(chunk);
                paragraph1.add(chunk1);
                list.add(new ListItem(paragraph1));

            }
            paragraph.add(list);
            return paragraph;

        }


        return new Paragraph("");
    }

    private static Paragraph generateQueryReport3(String title, List<OpportunitiesByIndustryDTO> objects) throws DocumentException {


        if (!objects.isEmpty()) {

            Paragraph paragraph = new Paragraph(title, subFont);
            com.itextpdf.text.List list = new com.itextpdf.text.List(false, false, 10);
            for (OpportunitiesByIndustryDTO object : objects) {
                Chunk chunk = new Chunk(String.valueOf(object.getIndustry()) + ": ", smallBold);
                Chunk chunk1 = new Chunk(String.valueOf(object.getCount()), small);
                Paragraph paragraph1 = new Paragraph("");
                paragraph1.add(chunk);
                paragraph1.add(chunk1);
                list.add(new ListItem(paragraph1));

            }
            paragraph.add(list);
            return paragraph;

        }


        return new Paragraph("");
    }

    private static Paragraph generateQueryReport4(String title, List<OpportunityByProductDTO> objects) throws DocumentException {


        if (!objects.isEmpty()) {

            Paragraph paragraph = new Paragraph(title, subFont);
            com.itextpdf.text.List list = new com.itextpdf.text.List(false, false, 10);
            for (OpportunityByProductDTO object : objects) {
                Chunk chunk = new Chunk(String.valueOf(object.getProduct()) + ": ", smallBold);
                Chunk chunk1 = new Chunk(String.valueOf(object.getCount()), small);
                Paragraph paragraph1 = new Paragraph("");
                paragraph1.add(chunk);
                paragraph1.add(chunk1);
                list.add(new ListItem(paragraph1));

            }
            paragraph.add(list);
            return paragraph;

        }


        return new Paragraph("");
    }

    private static Paragraph generateQueryReport5(String title, List<ReportDTO> objects) throws DocumentException {


        if (!objects.isEmpty()) {

            Paragraph paragraph = new Paragraph(title, subFont);
            com.itextpdf.text.List list = new com.itextpdf.text.List(false, false, 10);
            for (ReportDTO object : objects) {
                Chunk chunk = new Chunk(String.valueOf(object.getName()) + ": ", smallBold);
                Chunk chunk1 = new Chunk(String.valueOf(object.getCount()), small);
                Paragraph paragraph1 = new Paragraph("");
                paragraph1.add(chunk);
                paragraph1.add(chunk1);
                list.add(new ListItem(paragraph1));

            }
            paragraph.add(list);
            return paragraph;

        }


        return new Paragraph("");
    }


    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }


}
